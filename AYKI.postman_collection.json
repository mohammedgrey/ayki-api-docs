{
	"info": {
		"_postman_id": "6181dcfa-b6e8-48e8-b04e-77c1752e62b2",
		"name": "AYKI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27664548",
		"_collection_link": "https://solar-shadow-95955.postman.co/workspace/AYKI~585b895e-3532-46e9-8994-cca3f50c5621/collection/27664548-6181dcfa-b6e8-48e8-b04e-77c1752e62b2?action=share&source=collection_link&creator=27664548"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "[User] User Registration",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\":\"test\",\n    \"last_name\":\"test\",\n    \"email\":\"test@gmail.com\",\n    \"password\":\"1234qwerA!\",\n    \"phone\":\"+96170987654\",\n    \"country_code\": \"LB\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/auth/register",
							"path": [
								"auth",
								"register"
							]
						},
						"description": "## Register User\n\nThis endpoint allows the user to register by providing their first name, last name, email, password, phone, and country code.\n\n## User/Role\n\nuser\n\n### Request Body\n\n- `first_name` (string, required): The first name of the user.\n- `last_name` (string, required): The last name of the user.\n- `email` (string, required): The email address of the user.\n- `password` (string, required): The password for the user account.\n- `phone` (string, required): The phone number of the user.\n- `country_code` (string, required): The country code for the user's phone number."
					},
					"response": [
						{
							"name": "[User] User Registration (200)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/auth/register",
									"path": [
										"auth",
										"register"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.kJwpLbOQOIZiWhEaW5JHH1vST6vP6rFBe5gA9_ELGJg\",\n        \"user\": {\n            \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n            \"first_name\":\"test\",\n            \"last_name\":\"test\",\n            \"email\":\"test@gmail.com\",\n            \"phone\":\"+96170987654\",\n            \"country_code\": \"LB\",\n            \"account_status\": \"active\",\n            \"login_provider\": \"email\",\n            \"role\":\"user\",\n            \"profile_picture\": null,\n            \"is_email_verified\": false,\n            \"created_at\": \"2023-12-25T08:30:00Z\",\n            \"updated_at\": \"2023-12-25T08:30:00Z\"\n        }\n    },\n    \"errors\": null,\n    \"message\":\"User registered successfully\"\n}"
						},
						{
							"name": "[User] User Registration (400)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/auth/register",
									"path": [
										"auth",
										"register"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\":{\n        \"email\": {\n            \"code\": \"email_already_taken\",\n            \"message\": \"The email provided is associated with another account.\"\n        }\n    },\n    \"message\": \"User regisration failed\"\n}"
						}
					]
				},
				{
					"name": "[User] User Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"test@gmail.com\",\n    \"password\":\"1234qwerA!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/auth/login",
							"path": [
								"auth",
								"login"
							]
						},
						"description": "## User Login\n\nThis endpoint allows the user to log in by providing their email and password.\n\n## User/Role\n\nuser\n\n### Request Body\n\n- `email` (string, required): The email address of the user.\n- `password` (string, required): The password for the user account."
					},
					"response": [
						{
							"name": "[User] User Login (200)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"test@gmail.com\",\n    \"password\":\"1234qwerA!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/login",
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.kJwpLbOQOIZiWhEaW5JHH1vST6vP6rFBe5gA9_ELGJg\",\n        \"user\": {\n            \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n            \"first_name\":\"test\",\n            \"last_name\":\"test\",\n            \"email\":\"test@gmail.com\",\n            \"phone\":\"+96170987654\",\n            \"country_code\": \"LB\",\n            \"account_status\": \"active\",\n            \"login_provider\": \"email\",\n            \"role\":\"user\",\n            \"profile_picture\": null,\n            \"is_email_verified\": true,\n            \"created_at\": \"2023-12-25T08:30:00Z\",\n            \"updated_at\": \"2023-12-25T08:30:00Z\"\n        }\n    },\n    \"errors\": null,\n    \"message\":\"User logged in successfully\"\n}"
						},
						{
							"name": "[User] User Login (401)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"test@gmail.com\",\n    \"password\":\"wrongpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/login",
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": {\n        \"email\": {\n            \"code\": \"invalid_credentials\",\n            \"message\": \"Invalid email or password. Please try again.\"\n        },\n         \"password\": {\n            \"code\": \"invalid_credentials\",\n            \"message\": \"Invalid email or password. Please try again.\"\n        }\n    },\n    \"message\": \"User login failed\"\n}"
						}
					]
				},
				{
					"name": "[User] Social Authentication",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"access_token\":\"YOUR_SOCIAL_ACCESS_TOKEN\",\n    \"provider\": \"facebook\" // or \"google\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/auth/social",
							"path": [
								"auth",
								"social"
							]
						},
						"description": "## Social Authentication\n\nThis endpoint allows the user to continue with social authentication by providing their access token and provider (either `facebook` or `google`).\n\n## User/Role\n\nuser\n\n### Request Body\n\n- `access_token` (string, required): The access token received from the social platform (Facebook or Google).\n- `provider` (string, required): The social platform provider (either `facebook` or `google`)."
					},
					"response": [
						{
							"name": "[User] Social Authentication (200)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\":\"YOUR_SOCIAL_ACCESS_TOKEN\",\n    \"provider\": \"facebook\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/social",
									"path": [
										"auth",
										"social"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.kJwpLbOQOIZiWhEaW5JHH1vST6vP6rFBe5gA9_ELGJg\",\n        \"user\": {\n            \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n            \"first_name\":\"test\",\n            \"last_name\":\"test\",\n            \"email\":\"test@gmail.com\",\n            \"phone\":\"+96170987654\",\n            \"country_code\": \"LB\",\n            \"account_status\": \"active\",\n            \"login_provider\": \"facebook\",\n            \"role\":\"user\",\n            \"profile_picture\": null,\n            \"is_email_verified\": true,\n            \"created_at\": \"2023-12-25T08:30:00Z\",\n            \"updated_at\": \"2023-12-25T08:30:00Z\"\n        }\n    },\n    \"errors\": null,\n    \"message\":\"User logged in successfully\"\n}"
						},
						{
							"name": "[User] Social Authentication (401)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access_token\":\"INVALID_SOCIAL_ACCESS_TOKEN\",\n    \"provider\": \"facebook\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/social",
									"path": [
										"auth",
										"social"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": {\n        \"authentication\": {\n            \"code\": \"invalid_token\",\n            \"message\": \"Invalid access token. Please try again.\"\n        }\n    },\n    \"message\": \"User login failed\"\n}"
						}
					]
				},
				{
					"name": "[User] Logout",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/auth/logout",
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "## User Logout\n\nThis endpoint allows the user to logout from their account.\n\n## User/Role\n\nuser\n\n### Request Body\n\n- No specific body required for logout."
					},
					"response": [
						{
							"name": "[User] Logout (200)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/logout",
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\":\"User logged out successfully\",\n    \"errors\": null,\n    \"data\": null\n}"
						},
						{
							"name": "[User] Logout (401)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/logout",
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Unauthorized. Please log in to perform this action.\",\n    \"errors\": null,\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "[User] Forgot Password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"user@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/auth/forgot-password",
							"path": [
								"auth",
								"forgot-password"
							]
						},
						"description": "## Forgot Password\n\nThis endpoint allows the user to initiate the process of resetting their password by providing their email.\n\n## User/Role\n\npublic\n\n### Request Body\n\n- `email` (string, required): The email address associated with the user's account."
					},
					"response": [
						{
							"name": "[User] Forgot Password (200)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"user@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/forgot-password",
									"path": [
										"auth",
										"forgot-password"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\":\"Password reset instructions sent to your email\",\n    \"errors\": null,\n    \"data\": null\n}"
						},
						{
							"name": "[User] Forgot Password (400)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/forgot-password",
									"path": [
										"auth",
										"forgot-password"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Invalid email format. Please provide a valid email address.\",\n    \"errors\": {\n        \"email\":{\n            \"code\": \"invalid_email\",\n            \"message\": \"Invalid email format. Please provide a valid email address.\"\n        }\n    },\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "[User] Reset Password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"user@example.com\",\n    \"reset_token\": \"RESET_TOKEN\",\n    \"new_password\": \"new_password_here\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/auth/reset-password",
							"path": [
								"auth",
								"reset-password"
							]
						},
						"description": "## Reset Password\n\nThis endpoint allows the user to reset their password by providing their email, reset token, and new password.\n\n## User/Role\n\npublic\n\n### Request Body\n\n- `email` (string, required): The email address associated with the user's account.\n- `reset_token` (string, required): The token sent to the user's email for password reset.\n- `new_password` (string, required): The new password for the user's account."
					},
					"response": [
						{
							"name": "[User] Reset Password (200)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"user@example.com\",\n    \"reset_token\": \"RESET_TOKEN\",\n    \"new_password\": \"new_password_here\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/reset-password",
									"path": [
										"auth",
										"reset-password"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\":\"Password has been reset successfully\",\n    \"errors\": null,\n    \"data\": null\n}"
						},
						{
							"name": "[User] Reset Password (400)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"user@example.com\",\n    \"reset_token\": \"\",\n    \"new_password\": \"new_password_here\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/reset-password",
									"path": [
										"auth",
										"reset-password"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Invalid or expired reset token. Please request a new one.\",\n    \"errors\": {\n        \"token\":{\n            \"code\": \"invalid_token\",\n            \"message\": \"Invalid or expired reset token. Please request a new one.\"\n        }\n    },\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "[User] Resend Verification Email",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"user@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/auth/resend-verification-email",
							"path": [
								"auth",
								"resend-verification-email"
							]
						},
						"description": "## Resend Verification Email\n\nThis endpoint allows the user to request a resend of the verification email by providing their email.\n\n## User/Role\n\npublic\n\n### Request Body\n\n- `email` (string, required): The email address associated with the user's account."
					},
					"response": [
						{
							"name": "[User] Resend Verification Email (200)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"user@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/resend-verification-email",
									"path": [
										"auth",
										"resend-verification-email"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\":\"Verification email resent successfully\",\n    \"errors\": null,\n    \"data\": null\n}"
						},
						{
							"name": "[User] Resend Verification Email (400)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/resend-verification-email",
									"path": [
										"auth",
										"resend-verification-email"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Invalid email format. Please provide a valid email address.\",\n     \"errors\": {\n        \"email\":{\n            \"code\": \"invalid_email\",\n            \"message\": \"Invalid email format. Please provide a valid email address.\"\n        }\n    },\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "[User] Verify Email",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"user@example.com\",\n    \"verification_code\": \"VERIFICATION_CODE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/auth/verify-email",
							"path": [
								"auth",
								"verify-email"
							]
						},
						"description": "## Verify Email\n\nThis endpoint allows the user to verify their email by providing their email and verification code.\n\n## User/Role\n\npublic\n\n### Request Body\n\n- `email` (string, required): The email address associated with the user's account.\n- `verification_code` (string, required): The verification code sent to the user's email for email verification."
					},
					"response": [
						{
							"name": "[User] Verify Email (200)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"user@example.com\",\n    \"verification_code\": \"VERIFICATION_CODE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/verify-email",
									"path": [
										"auth",
										"verify-email"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\":\"Email verified successfully\",\n    \"errors\": null,\n    \"data\": null\n}"
						},
						{
							"name": "[User] Verify Email (400)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"user@example.com\",\n    \"verification_code\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/verify-email",
									"path": [
										"auth",
										"verify-email"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Invalid verification code. Please provide a valid verification code.\",\n    \"errors\": {\n        \"verification_code\":{\n            \"code\": \"invalid_code\",\n            \"message\": \"Invalid verification code. Please provide a valid verification code.\"\n        }\n    },\n    \"data\": null\n}"
						}
					]
				},
				{
					"name": "[User] Change Password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"user@example.com\",\n    \"current_password\": \"current_password_here\",\n    \"new_password\": \"new_password_here\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/auth/change-password",
							"path": [
								"auth",
								"change-password"
							]
						},
						"description": "## Change Password\n\nThis endpoint allows the user to change their password by providing their email, current password, and new password.\n\n## User/Role\n\nuser\n\n### Request Body\n\n- `email` (string, required): The email address associated with the user's account.\n- `current_password` (string, required): The user's current password.\n- `new_password` (string, required): The new password for the user's account."
					},
					"response": [
						{
							"name": "[User] Change Password (200)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"user@example.com\",\n    \"current_password\": \"current_password_here\",\n    \"new_password\": \"new_password_here\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/change-password",
									"path": [
										"auth",
										"change-password"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\":\"Password changed successfully\",\n    \"errors\": null,\n    \"data\": null\n}"
						},
						{
							"name": "[User] Change Password (401)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"user@example.com\",\n    \"current_password\": \"incorrect_password\",\n    \"new_password\": \"new_password_here\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/auth/change-password",
									"path": [
										"auth",
										"change-password"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Incorrect current password. Please try again.\",\n    \"errors\":{\n        \"current_password\":{\n            \"code\": \"incorrect_current_password\",\n            \"message\": \"Incorrect current password. Please try again.\"\n        }\n    },\n    \"data\": null\n}"
						}
					]
				}
			],
			"description": "The endpoints related to the user authentication (login, register, verify email, change password...etc.)"
		},
		{
			"name": "users",
			"item": [
				{
					"name": "[Admin] Get Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/users?search=query&page=1&limit_per_page=10",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "search",
									"value": "query"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit_per_page",
									"value": "10"
								}
							]
						},
						"description": "## Admin Only\n\nThis endpoint retrieves a list of users.\n\n### Query Parameters:\n- `search` (string): Search query\n- `page` (number): Page number\n- `limit_per_page` (number): Limit per page"
					},
					"response": [
						{
							"name": "[Admin] Get Users Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/users?search=query&page=1&limit_per_page=10",
									"path": [
										"users"
									],
									"query": [
										{
											"key": "search",
											"value": "query"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit_per_page",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"items\": [\n            {\n            \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n            \"first_name\":\"test\",\n            \"last_name\":\"test\",\n            \"email\":\"test@gmail.com\",\n            \"phone\":\"+96170987654\",\n            \"country_code\": \"LB\",\n            \"account_status\": \"active\",\n            \"login_provider\": \"email\",\n            \"role\":\"user\",\n            \"profile_picture\": null,\n            \"is_email_verified\": false,\n            \"created_at\": \"2023-12-25T08:30:00Z\",\n            \"updated_at\": \"2023-12-25T08:30:00Z\"\n            }\n        ],\n        \"pagination\": {\n            \"total_pages\": 5,\n            \"limit_per_page\": 10,\n            \"current_page\": 1,\n            \"last_page\": 5\n        }\n    },\n    \"errors\": null,\n    \"message\": \"Users retrieved successfully\"\n}"
						},
						{
							"name": "[Admin] Get Users Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/users?search=query&page=1&limit_per_page=10",
									"path": [
										"users"
									],
									"query": [
										{
											"key": "search",
											"value": "query"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit_per_page",
											"value": "10"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"Unauthorized. Admin access required.\"\n}"
						}
					]
				},
				{
					"name": "[Admin] Create User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\":\"test\",\n    \"last_name\":\"test\",\n    \"email\":\"test@gmail.com\",\n    \"password\":\"1234qwerA!\",\n    \"phone\":\"+96170987654\",\n    \"country_code\": \"LB\",\n    \"role\": \"user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/users",
							"path": [
								"users"
							]
						},
						"description": "## Admin Only\n\nThis endpoint creates a new user.\n\n### Request Body\n\n- `email` (string, required): Email address\n- `password` (string, required): User password\n- `role` (string, required): User role"
					},
					"response": [
						{
							"name": "[Admin] Create User Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"new_password\",\n    \"role\": \"user\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users",
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"user\":{\n            \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n            \"first_name\":\"test\",\n            \"last_name\":\"test\",\n            \"email\":\"test@gmail.com\",\n            \"phone\":\"+96170987654\",\n            \"country_code\": \"LB\",\n            \"account_status\": \"active\",\n            \"login_provider\": \"email\",\n            \"role\":\"user\",\n            \"profile_picture\": null,\n            \"is_email_verified\": false,\n            \"created_at\": \"2023-12-25T08:30:00Z\",\n            \"updated_at\": \"2023-12-25T08:30:00Z\"\n        }\n    },\n    \"errors\": null,\n    \"message\": \"User created successfully\"\n}"
						},
						{
							"name": "[Admin] Create User Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"new_password\",\n    \"role\": \"user\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users",
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"Invalid request body\"\n}"
						}
					]
				},
				{
					"name": "[Admin] Delete User by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/users/{{userId}}",
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "## Admin Only\n\nThis endpoint deletes a user by their ID."
					},
					"response": [
						{
							"name": "[Admin] Delete User Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/users/f47ac10b-58cc-4372-a567-0e02b2c3d479",
									"path": [
										"users",
										"f47ac10b-58cc-4372-a567-0e02b2c3d479"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"User deleted successfully\"\n}"
						},
						{
							"name": "[Admin] Delete User Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/users/invalidUserId",
									"path": [
										"users",
										"invalidUserId"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"User ID not found\"\n}"
						}
					]
				},
				{
					"name": "[Admin] Update User by ID",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\":\"updated_test\",\n    \"last_name\":\"updated_test\",\n    \"email\":\"updated_test@gmail.com\",\n    \"phone\":\"+96170987654\",\n    \"country_code\": \"LB\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/users/{{userId}}",
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "## Admin Only\n\nThis endpoint updates a user's information by their ID.\n\n### Request Body\n\n- `first_name` (string): Updated first name\n- `last_name` (string): Updated last name\n- `email` (string): Updated email address\n- `phone` (string): Updated phone number\n- `country_code` (string): Updated country code"
					},
					"response": [
						{
							"name": "[Admin] Update User Success",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\":\"updated_test\",\n    \"last_name\":\"updated_test\",\n    \"email\":\"updated_test@gmail.com\",\n    \"phone\":\"+96170987654\",\n    \"country_code\": \"LB\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users/f47ac10b-58cc-4372-a567-0e02b2c3d479",
									"path": [
										"users",
										"f47ac10b-58cc-4372-a567-0e02b2c3d479"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"user\":{\n            \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n            \"first_name\":\"updated_test\",\n            \"last_name\":\"updated_test\",\n            \"email\":\"updated_test@gmail.com\",\n            \"phone\":\"+96170987654\",\n            \"country_code\": \"LB\",\n            \"account_status\": \"active\",\n            \"login_provider\": \"facebook\",\n            \"role\":\"user\",\n            \"profile_picture\": null,\n            \"is_email_verified\": true,\n            \"created_at\": \"2023-12-25T08:30:00Z\",\n            \"updated_at\": \"2023-12-25T08:30:00Z\"\n        }\n    },\n    \"errors\": null,\n    \"message\": \"User updated successfully\"\n}"
						},
						{
							"name": "[Admin] Update User Failure",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\":\"updated_test\",\n    \"last_name\":\"updated_test\",\n    \"email\":\"updated_test@gmail.com\",\n    \"phone\":\"+96170987654\",\n    \"country_code\": \"LB\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users/invalidUserId",
									"path": [
										"users",
										"invalidUserId"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"User ID not found\"\n}"
						}
					]
				},
				{
					"name": "[Admin] Get User by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/users/{{userId}}",
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "## Admin Only\n\nThis endpoint retrieves user details by their ID."
					},
					"response": [
						{
							"name": "[Admin] Get User Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/users/f47ac10b-58cc-4372-a567-0e02b2c3d479",
									"path": [
										"users",
										"f47ac10b-58cc-4372-a567-0e02b2c3d479"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"user\":{\n            \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"email\": \"john@example.com\",\n            \"phone\": \"+1234567890\",\n            \"country_code\": \"US\",\n            \"account_status\": \"active\",\n            \"login_provider\": \"email\",\n            \"role\": \"user\",\n            \"profile_picture\": \"https://example.com/profile.jpg\",\n            \"is_email_verified\": true,\n            \"created_at\": \"2023-12-25T08:30:00Z\",\n            \"updated_at\": \"2023-12-25T08:30:00Z\"\n        }\n\n    },\n    \"errors\": null,\n    \"message\": \"User details retrieved successfully\"\n}"
						},
						{
							"name": "[Admin] Get User Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/users/invalidUserId",
									"path": [
										"users",
										"invalidUserId"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"User ID not found\"\n}"
						}
					]
				},
				{
					"name": "[Admin] Suspend User by ID",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_suspended\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/users/{{userId}}/suspend",
							"path": [
								"users",
								"{{userId}}",
								"suspend"
							]
						},
						"description": "## Admin Only\n\nThis endpoint suspends a user by their ID.\n\n### Request Body\n\n- `is_suspended` (boolean): Set to `true` to suspend the user."
					},
					"response": [
						{
							"name": "[Admin] Suspend User Success",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"is_suspended\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users/f47ac10b-58cc-4372-a567-0e02b2c3d479/suspend",
									"path": [
										"users",
										"f47ac10b-58cc-4372-a567-0e02b2c3d479",
										"suspend"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"User suspended successfully\"\n}"
						},
						{
							"name": "[Admin] Suspend User Failure",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"is_suspended\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users/invalidUserId/suspend",
									"path": [
										"users",
										"invalidUserId",
										"suspend"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"User ID not found\"\n}"
						}
					]
				},
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/users/profile",
							"path": [
								"users",
								"profile"
							]
						},
						"description": "## User Profile\n\nThis endpoint retrieves the user's profile details."
					},
					"response": [
						{
							"name": "Get User Profile Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/users/profile",
									"path": [
										"users",
										"profile"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"user\":{\n            \"id\": \"123456\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"email\": \"john@example.com\",\n            \"phone\": \"+1234567890\",\n            \"country_code\": \"US\",\n            \"account_status\": \"active\",\n            \"login_provider\": \"email\",\n            \"role\": \"user\",\n            \"profile_picture\": \"https://example.com/profile.jpg\",\n            \"is_email_verified\": true,\n            \"created_at\": \"2023-12-25T08:30:00Z\",\n            \"updated_at\": \"2023-12-25T08:30:00Z\"\n        }\n    },\n    \"errors\": null,\n    \"message\": \"User profile retrieved successfully\"\n}"
						},
						{
							"name": "Get User Profile Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/users/profile",
									"path": [
										"users",
										"profile"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"User profile not found\"\n}"
						}
					]
				},
				{
					"name": "Update User Profile",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Updated\",\n    \"last_name\": \"User\",\n    \"phone\": \"+1122334455\",\n    \"country_code\": \"US\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/users/profile",
							"path": [
								"users",
								"profile"
							]
						},
						"description": "## User Profile\n\nThis endpoint updates the user's profile details.\n\n### Request Body\n\n- `first_name` (string): The updated first name.\n- `last_name` (string): The updated last name.\n- `phone` (string): The updated phone number.\n- `country_code` (string): The updated country code."
					},
					"response": [
						{
							"name": "Update User Profile Success",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\": \"Updated\",\n    \"last_name\": \"User\",\n    \"phone\": \"+1122334455\",\n    \"country_code\": \"US\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users/profile",
									"path": [
										"users",
										"profile"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n         \"user\":{\n            \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n            \"email\":\"test@gmail.com\",\n            \"first_name\": \"Updated\",\n            \"last_name\": \"User\",\n            \"phone\": \"+1122334455\",\n            \"country_code\": \"US\",\n            \"account_status\": \"active\",\n            \"login_provider\": \"email\",\n            \"role\":\"user\",\n            \"profile_picture\": null,\n            \"is_email_verified\": false,\n            \"created_at\": \"2023-12-25T08:30:00Z\",\n            \"updated_at\": \"2023-12-25T08:30:00Z\"\n        }\n    },\n    \"errors\": null,\n    \"message\": \"User profile updated successfully\"\n}"
						},
						{
							"name": "Update User Profile Failure",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\": \"Updated\",\n    \"last_name\": \"User\",\n    \"phone\": \"+1122334455\",\n    \"country_code\": \"US\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users/profile",
									"path": [
										"users",
										"profile"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": {\n        \"phone\": {\n            \"code\": \"invalid_phone\",\n            \"message\": \"Invalid phone number format\"\n        }\n    },\n    \"message\": \"Failed to update user profile\"\n}"
						}
					]
				},
				{
					"name": "Get User Preferences",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/users/profile/preferences",
							"path": [
								"users",
								"profile",
								"preferences"
							]
						},
						"description": "## User Preferences\n\nThis endpoint retrieves the user's preferences."
					},
					"response": [
						{
							"name": "Get User Preferences Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/users/profile/preferences",
									"path": [
										"users",
										"profile",
										"preferences"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"preferences\": {\n            \"app_locale\": \"ar\",\n            \"app_theme\": \"follow device\",\n            \"allow_email_notifications\": false,\n            \"allow_push_notifications\": true,\n            \"measurement_system\": \"imperial\",\n            \"data_export_format\": \"JSON\"\n        }\n    },\n    \"errors\": null,\n    \"message\": \"User preferences retrieved successfully\"\n}"
						},
						{
							"name": "Get User Preferences Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/users/profile/preferences",
									"path": [
										"users",
										"profile",
										"preferences"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"User preferences not found\"\n}"
						}
					]
				},
				{
					"name": "Update User Preferences",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"app_locale\": \"ar\",\n    \"app_theme\": \"follow device\",\n    \"allow_email_notifications\": false,\n    \"allow_push_notifications\": true,\n    \"measurement_system\": \"imperial\",\n    \"data_export_format\": \"JSON\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/users/profile/preferences",
							"path": [
								"users",
								"profile",
								"preferences"
							]
						},
						"description": "## User Preferences\n\nThis endpoint updates the user's preferences.\n\n### Request Body\n\n- `app_locale` (string): The preferred app locale (e.g., en, ar).\n- `app_theme` (string): The preferred app theme (e.g., light, dark, follow device).\n- `allow_email_notifications` (boolean): Allows email notifications if true.\n- `allow_push_notifications` (boolean): Allows push notifications if true.\n- `measurement_system` (string): The preferred measurement system (e.g., metric, imperial).\n- `data_export_format` (string): The preferred data export format (e.g., CSV, JSON)."
					},
					"response": [
						{
							"name": "Update User Preferences Success",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"app_locale\": \"ar\",\n    \"app_theme\": \"follow device\",\n    \"allow_email_notifications\": false,\n    \"allow_push_notifications\": true,\n    \"measurement_system\": \"imperial\",\n    \"data_export_format\": \"JSON\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users/profile/preferences",
									"path": [
										"users",
										"profile",
										"preferences"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"preferences\": {\n            \"app_locale\": \"ar\",\n            \"app_theme\": \"follow device\",\n            \"allow_email_notifications\": false,\n            \"allow_push_notifications\": true,\n            \"measurement_system\": \"imperial\",\n            \"data_export_format\": \"JSON\"\n            }\n    },\n    \"errors\": null,\n    \"message\": \"User preferences updated successfully\"\n}"
						},
						{
							"name": "Update User Preferences Failure",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"app_locale\": \"ar\",\n    \"app_theme\": \"follow device\",\n    \"allow_email_notifications\": false,\n    \"allow_push_notifications\": true,\n    \"measurement_system\": \"imperial\",\n    \"data_export_format\": \"JSON\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users/profile/preferences",
									"path": [
										"users",
										"profile",
										"preferences"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"data\": null,\n    \"errors\": {\n        \"app_theme\": {\n            \"code\": \"invalid_value\",\n            \"message\": \"Invalid app theme value\"\n        }\n    },\n    \"message\": \"Failed to update user preferences\"\n}"
						}
					]
				}
			],
			"description": "The endpoints related to managing the users from the admin and the user profile/preferences in the app.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.kJwpLbOQOIZiWhEaW5JHH1vST6vP6rFBe5gA9_ELGJg",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "farms",
			"item": [
				{
					"name": "[Farm] Create Farm",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"farm_name\": \"Green Valley Farm\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farms",
							"path": [
								"farms"
							]
						},
						"description": "Create a new farm with a specified name."
					},
					"response": [
						{
							"name": "Create Farm Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"generated-farm-id\",\n        \"farm_name\": \"Green Valley Farm\",\n        \"created_at\": \"2024-01-21T10:00:00Z\"\n    },\n    \"message\": \"Farm created successfully\"\n}"
						},
						{
							"name": "Create Farm Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"farm_name\": \"Farm name already exists\"\n    },\n    \"message\": \"Farm creation failed\"\n}"
						}
					]
				},
				{
					"name": "[Farm] Get Farm Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/farms/{farm_id}",
							"path": [
								"farms",
								"{farm_id}"
							]
						},
						"description": "Retrieve details of a specific farm using its ID."
					},
					"response": [
						{
							"name": "Get Farm Details Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farms/{farm_id}",
									"path": [
										"farms",
										"{farm_id}"
									]
								},
								"description": "Retrieve details of a specific farm using its ID."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"existing-farm-id\",\n    \"farm_name\": \"Green Valley Farm\",\n    \"created_at\": \"2024-01-21T10:00:00Z\"\n    // Other farm details...\n  }\n}"
						},
						{
							"name": "Get Farm Details Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farms/{farm_id}",
									"path": [
										"farms",
										"{farm_id}"
									]
								},
								"description": "Retrieve details of a specific farm using its ID."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm] Update Farm Details",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"farm_name\": \"Updated Farm Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farms/{farm_id}",
							"path": [
								"farms",
								"{farm_id}"
							]
						},
						"description": "Update details of a specific farm."
					},
					"response": [
						{
							"name": "Update Farm Details Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_name\": \"Updated Farm Name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farms/{farm_id}",
									"path": [
										"farms",
										"{farm_id}"
									]
								},
								"description": "Update details of a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm details updated successfully\"\n}"
						},
						{
							"name": "Update Farm Details Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_name\": \"Updated Farm Name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farms/{farm_id}",
									"path": [
										"farms",
										"{farm_id}"
									]
								},
								"description": "Update details of a specific farm."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"farm_name\": \"Farm name already exists\"\n    },\n    \"message\": \"Farm update failed\"\n}"
						}
					]
				},
				{
					"name": "[Farm] Delete Farm",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/farms/{farm_id}",
							"path": [
								"farms",
								"{farm_id}"
							]
						},
						"description": "Delete a specific farm using its ID."
					},
					"response": [
						{
							"name": "Delete Farm Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farms/{farm_id}",
									"path": [
										"farms",
										"{farm_id}"
									]
								},
								"description": "Delete a specific farm using its ID."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm deleted successfully\"\n}"
						},
						{
							"name": "Delete Farm Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farms/{farm_id}",
									"path": [
										"farms",
										"{farm_id}"
									]
								},
								"description": "Delete a specific farm using its ID."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm] List Farms",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/farms?search={{search}}&page={{page}}&limit={{limit}}",
							"path": [
								"farms"
							],
							"query": [
								{
									"key": "search",
									"value": "{{search}}"
								},
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						},
						"description": "List farms with optional search, pagination, and limit per page."
					},
					"response": [
						{
							"name": "List Farms Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farms?search={{search}}&page={{page}}&limit={{limit}}",
									"path": [
										"farms"
									],
									"query": [
										{
											"key": "search",
											"value": "{{search}}"
										},
										{
											"key": "page",
											"value": "{{page}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								},
								"description": "List farms with optional search, pagination, and limit per page."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"farms\": [\n      // List of farms...\n    ],\n    \"pagination\": {\n      \"total_pages\": 10,\n      \"current_page\": 1,\n      \"limit_per_page\": 10\n    }\n  }\n}"
						},
						{
							"name": "List Farms Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farms?search={{search}}&page={{page}}&limit={{limit}}",
									"path": [
										"farms"
									],
									"query": [
										{
											"key": "search",
											"value": "{{search}}"
										},
										{
											"key": "page",
											"value": "{{page}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								},
								"description": "List farms with optional search, pagination, and limit per page."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Invalid query parameters\"\n}"
						}
					]
				},
				{
					"name": "[Farm User] Assign User to Farm",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"user-uuid\",\n  \"farm_id\": \"farm-uuid\",\n  \"role\": \"viewer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_users",
							"path": [
								"farm_users"
							]
						},
						"description": "Assign a user to a farm with a specific role."
					},
					"response": [
						{
							"name": "Assign User to Farm Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": \"user-uuid\",\n  \"farm_id\": \"farm-uuid\",\n  \"role\": \"viewer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_users",
									"path": [
										"farm_users"
									]
								},
								"description": "Assign a user to a farm with a specific role."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"User assigned to farm successfully\"\n}"
						},
						{
							"name": "Assign User to Farm Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": \"user-uuid\",\n  \"farm_id\": \"farm-uuid\",\n  \"role\": \"viewer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_users",
									"path": [
										"farm_users"
									]
								},
								"description": "Assign a user to a farm with a specific role."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"user_id\": \"Invalid user ID\",\n        \"farm_id\": \"Invalid farm ID\"\n    },\n    \"message\": \"Failed to assign user to farm\"\n}"
						}
					]
				},
				{
					"name": "[Farm User] Get Farm Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/farm_users/{farm_id}",
							"path": [
								"farm_users",
								"{farm_id}"
							]
						},
						"description": "Retrieve a list of users associated with a specific farm."
					},
					"response": [
						{
							"name": "Get Farm Users Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_users/{farm_id}",
									"path": [
										"farm_users",
										"{farm_id}"
									]
								},
								"description": "Retrieve a list of users associated with a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"user_id\": \"user-uuid\",\n      \"role\": \"viewer\"\n      // Other user details...\n    }\n    // Additional users...\n  ]\n}"
						},
						{
							"name": "Get Farm Users Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_users/{farm_id}",
									"path": [
										"farm_users",
										"{farm_id}"
									]
								},
								"description": "Retrieve a list of users associated with a specific farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm User] Update Farm User Role",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"owner\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_users/{farm_user_id}",
							"path": [
								"farm_users",
								"{farm_user_id}"
							]
						},
						"description": "Update the role of a user within a specific farm."
					},
					"response": [
						{
							"name": "Update Farm User Role Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"role\": \"owner\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_users/{farm_user_id}",
									"path": [
										"farm_users",
										"{farm_user_id}"
									]
								},
								"description": "Update the role of a user within a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm user role updated successfully\"\n}"
						},
						{
							"name": "Update Farm User Role Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"role\": \"owner\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_users/{farm_user_id}",
									"path": [
										"farm_users",
										"{farm_user_id}"
									]
								},
								"description": "Update the role of a user within a specific farm."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"role\": \"Invalid role\"\n    },\n    \"message\": \"Failed to update farm user role\"\n}"
						}
					]
				},
				{
					"name": "[Farm User] Remove User from Farm",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/farm_users/{farm_user_id}",
							"path": [
								"farm_users",
								"{farm_user_id}"
							]
						},
						"description": "Remove a user from a specific farm."
					},
					"response": [
						{
							"name": "Remove User from Farm Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_users/{farm_user_id}",
									"path": [
										"farm_users",
										"{farm_user_id}"
									]
								},
								"description": "Remove a user from a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"User removed from farm successfully\"\n}"
						},
						{
							"name": "Remove User from Farm Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_users/{farm_user_id}",
									"path": [
										"farm_users",
										"{farm_user_id}"
									]
								},
								"description": "Remove a user from a specific farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm user not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Boundaries] Define Farm Boundaries",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"boundaries\": [\n    { \"latitude\": 34.0522, \"longitude\": -118.2437 },\n    // Additional boundary points...\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_boundaries",
							"path": [
								"farm_boundaries"
							]
						},
						"description": "Define the boundaries of a farm using a series of latitude and longitude points."
					},
					"response": [
						{
							"name": "Define Farm Boundaries Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"boundaries\": [\n    { \"latitude\": 34.0522, \"longitude\": -118.2437 },\n    // Additional boundary points...\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_boundaries",
									"path": [
										"farm_boundaries"
									]
								},
								"description": "Define the boundaries of a farm using a series of latitude and longitude points."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm boundaries defined successfully\"\n}"
						},
						{
							"name": "Define Farm Boundaries Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"boundaries\": [\n    { \"latitude\": 34.0522, \"longitude\": -118.2437 },\n    // Additional boundary points...\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_boundaries",
									"path": [
										"farm_boundaries"
									]
								},
								"description": "Define the boundaries of a farm using a series of latitude and longitude points."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"farm_id\": \"Invalid farm ID\"\n    },\n    \"message\": \"Failed to define farm boundaries\"\n}"
						}
					]
				},
				{
					"name": "[Farm Boundaries] Get Farm Boundaries",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/farm_boundaries/{farm_id}",
							"path": [
								"farm_boundaries",
								"{farm_id}"
							]
						},
						"description": "Retrieve the boundaries of a specific farm."
					},
					"response": [
						{
							"name": "Get Farm Boundaries Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_boundaries/{farm_id}",
									"path": [
										"farm_boundaries",
										"{farm_id}"
									]
								},
								"description": "Retrieve the boundaries of a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    { \"latitude\": 34.0522, \"longitude\": -118.2437 },\n    // Additional boundary points...\n  ]\n}"
						},
						{
							"name": "Get Farm Boundaries Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_boundaries/{farm_id}",
									"path": [
										"farm_boundaries",
										"{farm_id}"
									]
								},
								"description": "Retrieve the boundaries of a specific farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Boundaries] Update Farm Boundaries",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"boundaries\": [\n    { \"latitude\": 34.0522, \"longitude\": -118.2437 },\n    // Updated boundary points...\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_boundaries/{farm_id}",
							"path": [
								"farm_boundaries",
								"{farm_id}"
							]
						},
						"description": "Update the boundaries of a specific farm."
					},
					"response": [
						{
							"name": "Update Farm Boundaries Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"boundaries\": [\n    { \"latitude\": 34.0522, \"longitude\": -118.2437 },\n    // Updated boundary points...\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_boundaries/{farm_id}",
									"path": [
										"farm_boundaries",
										"{farm_id}"
									]
								},
								"description": "Update the boundaries of a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm boundaries updated successfully\"\n}"
						},
						{
							"name": "Update Farm Boundaries Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"boundaries\": [\n    { \"latitude\": 34.0522, \"longitude\": -118.2437 },\n    // Updated boundary points...\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_boundaries/{farm_id}",
									"path": [
										"farm_boundaries",
										"{farm_id}"
									]
								},
								"description": "Update the boundaries of a specific farm."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"farm_id\": \"Invalid farm ID\"\n    },\n    \"message\": \"Failed to update farm boundaries\"\n}"
						}
					]
				},
				{
					"name": "[Farm Boundaries] Delete Farm Boundaries",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/farm_boundaries/{farm_id}",
							"path": [
								"farm_boundaries",
								"{farm_id}"
							]
						},
						"description": "Delete the boundaries of a specific farm."
					},
					"response": [
						{
							"name": "Delete Farm Boundaries Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_boundaries/{farm_id}",
									"path": [
										"farm_boundaries",
										"{farm_id}"
									]
								},
								"description": "Delete the boundaries of a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm boundaries deleted successfully\"\n}"
						},
						{
							"name": "Delete Farm Boundaries Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_boundaries/{farm_id}",
									"path": [
										"farm_boundaries",
										"{farm_id}"
									]
								},
								"description": "Delete the boundaries of a specific farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Properties] Add Farm Property",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_properties",
							"path": [
								"farm_properties"
							]
						},
						"description": "Add a property to a specific farm."
					},
					"response": [
						{
							"name": "Add Farm Property Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_properties",
									"path": [
										"farm_properties"
									]
								},
								"description": "Add a property to a specific farm."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm property added successfully\"\n}"
						},
						{
							"name": "Add Farm Property Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_properties",
									"path": [
										"farm_properties"
									]
								},
								"description": "Add a property to a specific farm."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"farm_id\": \"Invalid farm ID\",\n        \"property_id\": \"Invalid property ID\"\n    },\n    \"message\": \"Failed to add farm property\"\n}"
						}
					]
				},
				{
					"name": "[Farm Properties] Get Farm Properties",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/farm_properties/{farm_id}",
							"path": [
								"farm_properties",
								"{farm_id}"
							]
						},
						"description": "Retrieve properties of a specific farm."
					},
					"response": [
						{
							"name": "Get Farm Properties Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_properties/{farm_id}",
									"path": [
										"farm_properties",
										"{farm_id}"
									]
								},
								"description": "Retrieve properties of a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"property_id\": \"property-uuid\",\n      \"property_value\": \"value\"\n      // Other property details...\n    }\n    // Additional properties...\n  ]\n}"
						},
						{
							"name": "Get Farm Properties Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_properties/{farm_id}",
									"path": [
										"farm_properties",
										"{farm_id}"
									]
								},
								"description": "Retrieve properties of a specific farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Properties] Update Farm Property",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"property_value\": \"new value\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_properties/{property_id}",
							"path": [
								"farm_properties",
								"{property_id}"
							]
						},
						"description": "Update a property of a specific farm."
					},
					"response": [
						{
							"name": "Update Farm Property Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"property_value\": \"new value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_properties/{property_id}",
									"path": [
										"farm_properties",
										"{property_id}"
									]
								},
								"description": "Update a property of a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm property updated successfully\"\n}"
						},
						{
							"name": "Update Farm Property Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"property_value\": \"new value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_properties/{property_id}",
									"path": [
										"farm_properties",
										"{property_id}"
									]
								},
								"description": "Update a property of a specific farm."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"property_id\": \"Invalid property ID\"\n    },\n    \"message\": \"Failed to update farm property\"\n}"
						}
					]
				},
				{
					"name": "[Farm Properties] Delete Farm Property",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/farm_properties/{property_id}",
							"path": [
								"farm_properties",
								"{property_id}"
							]
						},
						"description": "Delete a property from a specific farm."
					},
					"response": [
						{
							"name": "Delete Farm Property Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_properties/{property_id}",
									"path": [
										"farm_properties",
										"{property_id}"
									]
								},
								"description": "Delete a property from a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm property deleted successfully\"\n}"
						},
						{
							"name": "Delete Farm Property Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_properties/{property_id}",
									"path": [
										"farm_properties",
										"{property_id}"
									]
								},
								"description": "Delete a property from a specific farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm property not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Weather] Create Weather Forecast",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"forecast_date\": \"2024-06-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_weather",
							"path": [
								"farm_weather"
							]
						},
						"description": "Create a new weather forecast for a specific farm."
					},
					"response": [
						{
							"name": "Create Weather Forecast Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"forecast_date\": \"2024-06-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_weather",
									"path": [
										"farm_weather"
									]
								},
								"description": "Create a new weather forecast for a specific farm."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-weather-forecast-id\",\n        \"farm_id\": \"farm-uuid\",\n        \"forecast_date\": \"2024-06-01\"\n    },\n    \"message\": \"Weather forecast created successfully\"\n}"
						},
						{
							"name": "Create Weather Forecast Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"forecast_date\": \"2024-06-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_weather",
									"path": [
										"farm_weather"
									]
								},
								"description": "Create a new weather forecast for a specific farm."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"farm_id\": \"Invalid farm ID\"\n    },\n    \"message\": \"Failed to create weather forecast\"\n}"
						}
					]
				},
				{
					"name": "[Farm Weather] Get Weather Forecasts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/farm_weather/{farm_id}",
							"path": [
								"farm_weather",
								"{farm_id}"
							]
						},
						"description": "Retrieve weather forecasts for a specific farm."
					},
					"response": [
						{
							"name": "Get Weather Forecasts Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_weather/{farm_id}",
									"path": [
										"farm_weather",
										"{farm_id}"
									]
								},
								"description": "Retrieve weather forecasts for a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"weather-forecast-id\",\n      \"forecast_date\": \"2024-06-01\"\n      // Additional forecast details...\n    }\n    // Additional forecasts...\n  ]\n}"
						},
						{
							"name": "Get Weather Forecasts Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_weather/{farm_id}",
									"path": [
										"farm_weather",
										"{farm_id}"
									]
								},
								"description": "Retrieve weather forecasts for a specific farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Weather forecasts not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Weather] Update Weather Forecast",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"forecast_date\": \"2024-06-02\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_weather/{weather_id}",
							"path": [
								"farm_weather",
								"{weather_id}"
							]
						},
						"description": "Update an existing weather forecast for a specific farm."
					},
					"response": [
						{
							"name": "Update Weather Forecast Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"forecast_date\": \"2024-06-02\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_weather/{weather_id}",
									"path": [
										"farm_weather",
										"{weather_id}"
									]
								},
								"description": "Update an existing weather forecast for a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Weather forecast updated successfully\"\n}"
						},
						{
							"name": "Update Weather Forecast Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"forecast_date\": \"2024-06-02\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_weather/{weather_id}",
									"path": [
										"farm_weather",
										"{weather_id}"
									]
								},
								"description": "Update an existing weather forecast for a specific farm."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"weather_id\": \"Invalid weather forecast ID\"\n    },\n    \"message\": \"Failed to update weather forecast\"\n}"
						}
					]
				},
				{
					"name": "[Farm Weather] Delete Weather Forecast",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/farm_weather/{weather_id}",
							"path": [
								"farm_weather",
								"{weather_id}"
							]
						},
						"description": "Delete a specific weather forecast for a farm."
					},
					"response": [
						{
							"name": "Delete Weather Forecast Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_weather/{weather_id}",
									"path": [
										"farm_weather",
										"{weather_id}"
									]
								},
								"description": "Delete a specific weather forecast for a farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Weather forecast deleted successfully\"\n}"
						},
						{
							"name": "Delete Weather Forecast Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_weather/{weather_id}",
									"path": [
										"farm_weather",
										"{weather_id}"
									]
								},
								"description": "Delete a specific weather forecast for a farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Weather forecast not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Weather Property] Add Weather Property",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"weather_id\": \"weather-forecast-id\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_weather_properties",
							"path": [
								"farm_weather_properties"
							]
						},
						"description": "Add a property to a specific farm weather forecast."
					},
					"response": [
						{
							"name": "Add Weather Property Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"weather_id\": \"weather-forecast-id\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_weather_properties",
									"path": [
										"farm_weather_properties"
									]
								},
								"description": "Add a property to a specific farm weather forecast."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-weather-property-id\",\n        \"message\": \"Weather property added successfully\"\n    }\n}"
						},
						{
							"name": "Add Weather Property Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"weather_id\": \"weather-forecast-id\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_weather_properties",
									"path": [
										"farm_weather_properties"
									]
								},
								"description": "Add a property to a specific farm weather forecast."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"weather_id\": \"Invalid weather forecast ID\",\n        \"property_id\": \"Invalid property ID\"\n    },\n    \"message\": \"Failed to add weather property\"\n}"
						}
					]
				},
				{
					"name": "[Farm Weather Property] Get Weather Properties",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/farm_weather_properties/{weather_id}",
							"path": [
								"farm_weather_properties",
								"{weather_id}"
							]
						},
						"description": "Retrieve properties associated with a specific farm weather forecast."
					},
					"response": [
						{
							"name": "Get Weather Properties Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_weather_properties/{weather_id}",
									"path": [
										"farm_weather_properties",
										"{weather_id}"
									]
								},
								"description": "Retrieve properties associated with a specific farm weather forecast."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"weather-property-id\",\n      \"property_value\": \"value\"\n      // Other property details...\n    }\n    // Additional weather properties...\n  ]\n}"
						},
						{
							"name": "Get Weather Properties Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_weather_properties/{weather_id}",
									"path": [
										"farm_weather_properties",
										"{weather_id}"
									]
								},
								"description": "Retrieve properties associated with a specific farm weather forecast."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Weather properties not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Weather Property] Update Weather Property",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"property_value\": \"updated value\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_weather_properties/{weather_property_id}",
							"path": [
								"farm_weather_properties",
								"{weather_property_id}"
							]
						},
						"description": "Update a property associated with a specific farm weather forecast."
					},
					"response": [
						{
							"name": "Update Weather Property Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"property_value\": \"updated value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_weather_properties/{weather_property_id}",
									"path": [
										"farm_weather_properties",
										"{weather_property_id}"
									]
								},
								"description": "Update a property associated with a specific farm weather forecast."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Weather property updated successfully\"\n}"
						},
						{
							"name": "Update Weather Property Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"property_value\": \"updated value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_weather_properties/{weather_property_id}",
									"path": [
										"farm_weather_properties",
										"{weather_property_id}"
									]
								},
								"description": "Update a property associated with a specific farm weather forecast."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"weather_property_id\": \"Invalid weather property ID\"\n    },\n    \"message\": \"Failed to update weather property\"\n}"
						}
					]
				},
				{
					"name": "[Farm Weather Property] Delete Weather Property",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/farm_weather_properties/{weather_property_id}",
							"path": [
								"farm_weather_properties",
								"{weather_property_id}"
							]
						},
						"description": "Delete a property from a specific farm weather forecast."
					},
					"response": [
						{
							"name": "Delete Weather Property Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_weather_properties/{weather_property_id}",
									"path": [
										"farm_weather_properties",
										"{weather_property_id}"
									]
								},
								"description": "Delete a property from a specific farm weather forecast."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Weather property deleted successfully\"\n}"
						},
						{
							"name": "Delete Weather Property Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_weather_properties/{weather_property_id}",
									"path": [
										"farm_weather_properties",
										"{weather_property_id}"
									]
								},
								"description": "Delete a property from a specific farm weather forecast."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Weather property not found\"\n}"
						}
					]
				},
				{
					"name": "[Element Farm Property] Add Property",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"element_id\": \"element-uuid\",\n  \"farm_id\": \"farm-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/element_farm_properties",
							"path": [
								"element_farm_properties"
							]
						},
						"description": "Add a property to a specific element on a specific farm."
					},
					"response": [
						{
							"name": "Add Element Farm Property Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"element_id\": \"element-uuid\",\n  \"farm_id\": \"farm-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_farm_properties",
									"path": [
										"element_farm_properties"
									]
								},
								"description": "Add a property to a specific element on a specific farm."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-element-farm-property-id\",\n        \"message\": \"Element farm property added successfully\"\n    }\n}"
						},
						{
							"name": "Add Element Farm Property Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"element_id\": \"element-uuid\",\n  \"farm_id\": \"farm-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_farm_properties",
									"path": [
										"element_farm_properties"
									]
								},
								"description": "Add a property to a specific element on a specific farm."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"element_id\": \"Invalid element ID\",\n        \"farm_id\": \"Invalid farm ID\",\n        \"property_id\": \"Invalid property ID\"\n    },\n    \"message\": \"Failed to add property to element farm\"\n}"
						}
					]
				},
				{
					"name": "[Element Farm Property] Get Properties",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/element_farm_properties/{element_id}/{farm_id}",
							"path": [
								"element_farm_properties",
								"{element_id}",
								"{farm_id}"
							]
						},
						"description": "Retrieve properties associated with a specific element on a specific farm."
					},
					"response": [
						{
							"name": "Get Element Farm Properties Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/element_farm_properties/{element_id}/{farm_id}",
									"path": [
										"element_farm_properties",
										"{element_id}",
										"{farm_id}"
									]
								},
								"description": "Retrieve properties associated with a specific element on a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"property-id\",\n      \"property_value\": \"value\"\n      // Other property details...\n    }\n    // Additional properties...\n  ]\n}"
						},
						{
							"name": "Get Element Farm Properties Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/element_farm_properties/{element_id}/{farm_id}",
									"path": [
										"element_farm_properties",
										"{element_id}",
										"{farm_id}"
									]
								},
								"description": "Retrieve properties associated with a specific element on a specific farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element farm properties not found\"\n}"
						}
					]
				},
				{
					"name": "[Element Farm Property] Update Property",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"property_value\": \"updated value\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/element_farm_properties/{property_id}",
							"path": [
								"element_farm_properties",
								"{property_id}"
							]
						},
						"description": "Update a property of a specific element on a specific farm."
					},
					"response": [
						{
							"name": "Update Element Farm Property Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"property_value\": \"updated value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_farm_properties/{property_id}",
									"path": [
										"element_farm_properties",
										"{property_id}"
									]
								},
								"description": "Update a property of a specific element on a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element farm property updated successfully\"\n}"
						},
						{
							"name": "Update Element Farm Property Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"property_value\": \"updated value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_farm_properties/{property_id}",
									"path": [
										"element_farm_properties",
										"{property_id}"
									]
								},
								"description": "Update a property of a specific element on a specific farm."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"property_id\": \"Invalid element farm property ID\"\n    },\n    \"message\": \"Failed to update element farm property\"\n}"
						}
					]
				},
				{
					"name": "[Element Farm Property] Delete Property",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/element_farm_properties/{property_id}",
							"path": [
								"element_farm_properties",
								"{property_id}"
							]
						},
						"description": "Delete a property from a specific element on a specific farm."
					},
					"response": [
						{
							"name": "Delete Element Farm Property Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/element_farm_properties/{property_id}",
									"path": [
										"element_farm_properties",
										"{property_id}"
									]
								},
								"description": "Delete a property from a specific element on a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element farm property deleted successfully\"\n}"
						},
						{
							"name": "Delete Element Farm Property Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/element_farm_properties/{property_id}",
									"path": [
										"element_farm_properties",
										"{property_id}"
									]
								},
								"description": "Delete a property from a specific element on a specific farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element farm property not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "elements",
			"item": [
				{
					"name": "[Element] Create Element",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"element_type_id\": \"element-type-id\",\n  \"name\": \"Oak Tree\",\n  \"description\": \"A large, deciduous tree\",\n  \"image\": \"oak-tree-image-path\",\n  \"shape\": \"circular\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/elements",
							"path": [
								"elements"
							]
						},
						"description": "Create a new element instance."
					},
					"response": [
						{
							"name": "Create Element Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"element_type_id\": \"element-type-id\",\n  \"name\": \"Oak Tree\",\n  \"description\": \"A large, deciduous tree\",\n  \"image\": \"oak-tree-image-path\",\n  \"shape\": \"circular\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/elements",
									"path": [
										"elements"
									]
								},
								"description": "Create a new element instance."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-element-id\",\n        \"name\": \"Oak Tree\",\n        \"description\": \"A large, deciduous tree\",\n        \"image\": \"oak-tree-image-path\",\n        \"shape\": \"circular\"\n    },\n    \"message\": \"Element created successfully\"\n}"
						},
						{
							"name": "Create Element Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"element_type_id\": \"element-type-id\",\n  \"name\": \"Oak Tree\",\n  \"description\": \"A large, deciduous tree\",\n  \"image\": \"oak-tree-image-path\",\n  \"shape\": \"circular\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/elements",
									"path": [
										"elements"
									]
								},
								"description": "Create a new element instance."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"name\": \"Element with this name already exists\"\n    },\n    \"message\": \"Failed to create element\"\n}"
						}
					]
				},
				{
					"name": "[Element] Get Element Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/elements/{element_id}",
							"path": [
								"elements",
								"{element_id}"
							]
						},
						"description": "Retrieve details of a specific element."
					},
					"response": [
						{
							"name": "Get Element Details Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/elements/{element_id}",
									"path": [
										"elements",
										"{element_id}"
									]
								},
								"description": "Retrieve details of a specific element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"element-id\",\n        \"name\": \"Oak Tree\",\n        \"description\": \"A large, deciduous tree\",\n        \"image\": \"oak-tree-image-path\",\n        \"shape\": \"circular\"\n    }\n}"
						},
						{
							"name": "Get Element Details Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/elements/{element_id}",
									"path": [
										"elements",
										"{element_id}"
									]
								},
								"description": "Retrieve details of a specific element."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element not found\"\n}"
						}
					]
				},
				{
					"name": "[Element] Update Element",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Oak Tree\",\n  \"description\": \"Updated description\",\n  \"image\": \"updated-oak-tree-image-path\",\n  \"shape\": \"rectangular\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/elements/{element_id}",
							"path": [
								"elements",
								"{element_id}"
							]
						},
						"description": "Update an existing element."
					},
					"response": [
						{
							"name": "Update Element Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Oak Tree\",\n  \"description\": \"Updated description\",\n  \"image\": \"updated-oak-tree-image-path\",\n  \"shape\": \"rectangular\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/elements/{element_id}",
									"path": [
										"elements",
										"{element_id}"
									]
								},
								"description": "Update an existing element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element updated successfully\"\n}"
						},
						{
							"name": "Update Element Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Oak Tree\",\n  \"description\": \"Updated description\",\n  \"image\": \"updated-oak-tree-image-path\",\n  \"shape\": \"rectangular\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/elements/{element_id}",
									"path": [
										"elements",
										"{element_id}"
									]
								},
								"description": "Update an existing element."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"name\": \"Element with this name already exists\"\n    },\n    \"message\": \"Failed to update element\"\n}"
						}
					]
				},
				{
					"name": "[Element] Delete Element",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/elements/{element_id}",
							"path": [
								"elements",
								"{element_id}"
							]
						},
						"description": "Delete a specific element."
					},
					"response": [
						{
							"name": "Delete Element Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/elements/{element_id}",
									"path": [
										"elements",
										"{element_id}"
									]
								},
								"description": "Delete a specific element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element deleted successfully\"\n}"
						},
						{
							"name": "Delete Element Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/elements/{element_id}",
									"path": [
										"elements",
										"{element_id}"
									]
								},
								"description": "Delete a specific element."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element not found\"\n}"
						}
					]
				},
				{
					"name": "[Element Property] Add Element Property",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"element_id\": \"element-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/element_properties",
							"path": [
								"element_properties"
							]
						},
						"description": "Add a property to a specific element."
					},
					"response": [
						{
							"name": "Add Element Property Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"element_id\": \"element-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_properties",
									"path": [
										"element_properties"
									]
								},
								"description": "Add a property to a specific element."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-element-property-id\",\n        \"message\": \"Element property added successfully\"\n    }\n}"
						},
						{
							"name": "Add Element Property Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"element_id\": \"element-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_properties",
									"path": [
										"element_properties"
									]
								},
								"description": "Add a property to a specific element."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"element_id\": \"Invalid element ID\",\n        \"property_id\": \"Invalid property ID\"\n    },\n    \"message\": \"Failed to add property to element\"\n}"
						}
					]
				},
				{
					"name": "[Element Property] Get Element Properties",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/element_properties/{element_id}",
							"path": [
								"element_properties",
								"{element_id}"
							]
						},
						"description": "Retrieve properties of a specific element."
					},
					"response": [
						{
							"name": "Get Element Properties Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/element_properties/{element_id}",
									"path": [
										"element_properties",
										"{element_id}"
									]
								},
								"description": "Retrieve properties of a specific element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"property-id\",\n      \"property_value\": \"value\"\n      // Other property details...\n    }\n    // Additional properties...\n  ]\n}"
						},
						{
							"name": "Get Element Properties Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/element_properties/{element_id}",
									"path": [
										"element_properties",
										"{element_id}"
									]
								},
								"description": "Retrieve properties of a specific element."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element properties not found\"\n}"
						}
					]
				},
				{
					"name": "[Element Property] Update Element Property",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"property_value\": \"updated value\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/element_properties/{element_property_id}",
							"path": [
								"element_properties",
								"{element_property_id}"
							]
						},
						"description": "Update a property of a specific element."
					},
					"response": [
						{
							"name": "Update Element Property Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"property_value\": \"updated value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_properties/{element_property_id}",
									"path": [
										"element_properties",
										"{element_property_id}"
									]
								},
								"description": "Update a property of a specific element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element property updated successfully\"\n}"
						},
						{
							"name": "Update Element Property Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"property_value\": \"updated value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_properties/{element_property_id}",
									"path": [
										"element_properties",
										"{element_property_id}"
									]
								},
								"description": "Update a property of a specific element."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"element_property_id\": \"Invalid element property ID\"\n    },\n    \"message\": \"Failed to update element property\"\n}"
						}
					]
				},
				{
					"name": "[Element Property] Delete Element Property",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/element_properties/{element_property_id}",
							"path": [
								"element_properties",
								"{element_property_id}"
							]
						},
						"description": "Delete a property from a specific element."
					},
					"response": [
						{
							"name": "Delete Element Property Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/element_properties/{element_property_id}",
									"path": [
										"element_properties",
										"{element_property_id}"
									]
								},
								"description": "Delete a property from a specific element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element property deleted successfully\"\n}"
						},
						{
							"name": "Delete Element Property Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/element_properties/{element_property_id}",
									"path": [
										"element_properties",
										"{element_property_id}"
									]
								},
								"description": "Delete a property from a specific element."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element property not found\"\n}"
						}
					]
				},
				{
					"name": "[Element Age] Record Element Age",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"element_id\": \"element-uuid\",\n  \"age\": 5,\n  \"crown_diameter\": 2.5,\n  \"crown_height\": 3.0,\n  \"trunk_diameter\": 0.5,\n  \"trunk_height\": 2.0,\n  \"root_diameter\": 1.5,\n  \"root_depth\": 1.0,\n  \"expected_yield_pieces\": 100,\n  \"expected_yield_weight\": 250\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/element_ages",
							"path": [
								"element_ages"
							]
						},
						"description": "Record the age and growth measurements of an element."
					},
					"response": [
						{
							"name": "Record Element Age Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"element_id\": \"element-uuid\",\n  \"age\": 5,\n  \"crown_diameter\": 2.5,\n  \"crown_height\": 3.0,\n  \"trunk_diameter\": 0.5,\n  \"trunk_height\": 2.0,\n  \"root_diameter\": 1.5,\n  \"root_depth\": 1.0,\n  \"expected_yield_pieces\": 100,\n  \"expected_yield_weight\": 250\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_ages",
									"path": [
										"element_ages"
									]
								},
								"description": "Record the age and growth measurements of an element."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-element-age-id\",\n        \"message\": \"Element age recorded successfully\"\n    }\n}"
						},
						{
							"name": "Record Element Age Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"element_id\": \"element-uuid\",\n  \"age\": 5,\n  \"crown_diameter\": 2.5,\n  \"crown_height\": 3.0,\n  \"trunk_diameter\": 0.5,\n  \"trunk_height\": 2.0,\n  \"root_diameter\": 1.5,\n  \"root_depth\": 1.0,\n  \"expected_yield_pieces\": 100,\n  \"expected_yield_weight\": 250\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_ages",
									"path": [
										"element_ages"
									]
								},
								"description": "Record the age and growth measurements of an element."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"element_id\": \"Invalid element ID\"\n    },\n    \"message\": \"Failed to record element age\"\n}"
						}
					]
				},
				{
					"name": "[Element Age] Get Element Ages",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/element_ages/{element_id}",
							"path": [
								"element_ages",
								"{element_id}"
							]
						},
						"description": "Retrieve age and growth data for a specific element."
					},
					"response": [
						{
							"name": "Get Element Ages Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/element_ages/{element_id}",
									"path": [
										"element_ages",
										"{element_id}"
									]
								},
								"description": "Retrieve age and growth data for a specific element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"age\": 5,\n      \"crown_diameter\": 2.5,\n      \"crown_height\": 3.0,\n      // Other age details...\n    }\n    // Additional age records...\n  ]\n}"
						},
						{
							"name": "Get Element Ages Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/element_ages/{element_id}",
									"path": [
										"element_ages",
										"{element_id}"
									]
								},
								"description": "Retrieve age and growth data for a specific element."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element age data not found\"\n}"
						}
					]
				},
				{
					"name": "[Element Age] Update Element Age",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"age\": 6,\n  \"crown_diameter\": 2.8,\n  \"crown_height\": 3.2,\n  \"trunk_diameter\": 0.6,\n  \"trunk_height\": 2.2,\n  \"root_diameter\": 1.6,\n  \"root_depth\": 1.1,\n  \"expected_yield_pieces\": 120,\n  \"expected_yield_weight\": 300\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/element_ages/{element_age_id}",
							"path": [
								"element_ages",
								"{element_age_id}"
							]
						},
						"description": "Update the age and growth measurements of an element."
					},
					"response": [
						{
							"name": "Update Element Age Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"age\": 6,\n  \"crown_diameter\": 2.8,\n  \"crown_height\": 3.2,\n  \"trunk_diameter\": 0.6,\n  \"trunk_height\": 2.2,\n  \"root_diameter\": 1.6,\n  \"root_depth\": 1.1,\n  \"expected_yield_pieces\": 120,\n  \"expected_yield_weight\": 300\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_ages/{element_age_id}",
									"path": [
										"element_ages",
										"{element_age_id}"
									]
								},
								"description": "Update the age and growth measurements of an element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element age updated successfully\"\n}"
						},
						{
							"name": "Update Element Age Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"age\": 6,\n  \"crown_diameter\": 2.8,\n  \"crown_height\": 3.2,\n  \"trunk_diameter\": 0.6,\n  \"trunk_height\": 2.2,\n  \"root_diameter\": 1.6,\n  \"root_depth\": 1.1,\n  \"expected_yield_pieces\": 120,\n  \"expected_yield_weight\": 300\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_ages/{element_age_id}",
									"path": [
										"element_ages",
										"{element_age_id}"
									]
								},
								"description": "Update the age and growth measurements of an element."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"element_age_id\": \"Invalid element age ID\"\n    },\n    \"message\": \"Failed to update element age\"\n}"
						}
					]
				},
				{
					"name": "[Element Age] Delete Element Age",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/element_ages/{element_age_id}",
							"path": [
								"element_ages",
								"{element_age_id}"
							]
						},
						"description": "Delete the age and growth data of a specific element."
					},
					"response": [
						{
							"name": "Delete Element Age Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/element_ages/{element_age_id}",
									"path": [
										"element_ages",
										"{element_age_id}"
									]
								},
								"description": "Delete the age and growth data of a specific element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element age deleted successfully\"\n}"
						},
						{
							"name": "Delete Element Age Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/element_ages/{element_age_id}",
									"path": [
										"element_ages",
										"{element_age_id}"
									]
								},
								"description": "Delete the age and growth data of a specific element."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element age data not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "farm-elements",
			"item": [
				{
					"name": "[Farm Element] Add Element to Farm",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"element_id\": \"element-uuid\",\n  \"center_position_x\": \"100\",\n  \"center_position_y\": \"200\",\n  \"length_x_axis\": 50,\n  \"length_y_axis\": 30,\n  \"count\": 1,\n  \"spacing\": null,\n  \"drawing_order\": 1,\n  \"placement_date\": \"2024-01-25\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_elements",
							"path": [
								"farm_elements"
							]
						},
						"description": "Add an element to a specific farm."
					},
					"response": [
						{
							"name": "Add Element to Farm Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"element_id\": \"element-uuid\",\n  \"center_position_x\": \"100\",\n  \"center_position_y\": \"200\",\n  \"length_x_axis\": 50,\n  \"length_y_axis\": 30,\n  \"count\": 1,\n  \"spacing\": null,\n  \"drawing_order\": 1,\n  \"placement_date\": \"2024-01-25\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_elements",
									"path": [
										"farm_elements"
									]
								},
								"description": "Add an element to a specific farm."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-farm-element-id\",\n        \"message\": \"Element added to farm successfully\"\n    }\n}"
						},
						{
							"name": "Add Element to Farm Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_id\": \"farm-uuid\",\n  \"element_id\": \"element-uuid\",\n  \"center_position_x\": \"100\",\n  \"center_position_y\": \"200\",\n  \"length_x_axis\": 50,\n  \"length_y_axis\": 30,\n  \"count\": 1,\n  \"spacing\": null,\n  \"drawing_order\": 1,\n  \"placement_date\": \"2024-01-25\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_elements",
									"path": [
										"farm_elements"
									]
								},
								"description": "Add an element to a specific farm."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"farm_id\": \"Invalid farm ID\",\n        \"element_id\": \"Invalid element ID\"\n    },\n    \"message\": \"Failed to add element to farm\"\n}"
						}
					]
				},
				{
					"name": "[Farm Element] Get Farm Elements",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/farm_elements/{farm_id}",
							"path": [
								"farm_elements",
								"{farm_id}"
							]
						},
						"description": "Retrieve a list of elements associated with a specific farm."
					},
					"response": [
						{
							"name": "Get Farm Elements Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_elements/{farm_id}",
									"path": [
										"farm_elements",
										"{farm_id}"
									]
								},
								"description": "Retrieve a list of elements associated with a specific farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"farm-element-id\",\n      \"element_id\": \"element-uuid\",\n      \"center_position_x\": \"100\",\n      \"center_position_y\": \"200\"\n      // Additional details...\n    }\n    // Additional farm elements...\n  ]\n}"
						},
						{
							"name": "Get Farm Elements Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_elements/{farm_id}",
									"path": [
										"farm_elements",
										"{farm_id}"
									]
								},
								"description": "Retrieve a list of elements associated with a specific farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Element] Update Farm Element",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"center_position_x\": \"150\",\n  \"center_position_y\": \"250\",\n  \"length_x_axis\": 60,\n  \"length_y_axis\": 40,\n  \"count\": 2,\n  \"spacing\": 10,\n  \"drawing_order\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_elements/{farm_element_id}",
							"path": [
								"farm_elements",
								"{farm_element_id}"
							]
						},
						"description": "Update an existing farm element."
					},
					"response": [
						{
							"name": "Update Farm Element Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"center_position_x\": \"150\",\n  \"center_position_y\": \"250\",\n  \"length_x_axis\": 60,\n  \"length_y_axis\": 40,\n  \"count\": 2,\n  \"spacing\": 10,\n  \"drawing_order\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_elements/{farm_element_id}",
									"path": [
										"farm_elements",
										"{farm_element_id}"
									]
								},
								"description": "Update an existing farm element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm element updated successfully\"\n}"
						},
						{
							"name": "Update Farm Element Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"center_position_x\": \"150\",\n  \"center_position_y\": \"250\",\n  \"length_x_axis\": 60,\n  \"length_y_axis\": 40,\n  \"count\": 2,\n  \"spacing\": 10,\n  \"drawing_order\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_elements/{farm_element_id}",
									"path": [
										"farm_elements",
										"{farm_element_id}"
									]
								},
								"description": "Update an existing farm element."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"farm_element_id\": \"Invalid farm element ID\"\n    },\n    \"message\": \"Failed to update farm element\"\n}"
						}
					]
				},
				{
					"name": "[Farm Element] Remove Element from Farm",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/farm_elements/{farm_element_id}",
							"path": [
								"farm_elements",
								"{farm_element_id}"
							]
						},
						"description": "Remove a specific element from a farm."
					},
					"response": [
						{
							"name": "Remove Element from Farm Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_elements/{farm_element_id}",
									"path": [
										"farm_elements",
										"{farm_element_id}"
									]
								},
								"description": "Remove a specific element from a farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element removed from farm successfully\"\n}"
						},
						{
							"name": "Remove Element from Farm Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_elements/{farm_element_id}",
									"path": [
										"farm_elements",
										"{farm_element_id}"
									]
								},
								"description": "Remove a specific element from a farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm element not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Element Property] Add Property",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"farm_element_id\": \"farm-element-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_element_properties",
							"path": [
								"farm_element_properties"
							]
						},
						"description": "Add a property to a specific farm element."
					},
					"response": [
						{
							"name": "Add Farm Element Property Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_element_id\": \"farm-element-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_element_properties",
									"path": [
										"farm_element_properties"
									]
								},
								"description": "Add a property to a specific farm element."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-farm-element-property-id\",\n        \"message\": \"Farm element property added successfully\"\n    }\n}"
						},
						{
							"name": "Add Farm Element Property Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"farm_element_id\": \"farm-element-uuid\",\n  \"property_id\": \"property-uuid\",\n  \"property_value\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_element_properties",
									"path": [
										"farm_element_properties"
									]
								},
								"description": "Add a property to a specific farm element."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"farm_element_id\": \"Invalid farm element ID\"\n    },\n    \"message\": \"Failed to add property to farm element\"\n}"
						}
					]
				},
				{
					"name": "[Farm Element Property] Get Properties",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/farm_element_properties/{farm_element_id}",
							"path": [
								"farm_element_properties",
								"{farm_element_id}"
							]
						},
						"description": "Retrieve properties of a specific farm element."
					},
					"response": [
						{
							"name": "Get Farm Element Properties Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_element_properties/{farm_element_id}",
									"path": [
										"farm_element_properties",
										"{farm_element_id}"
									]
								},
								"description": "Retrieve properties of a specific farm element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"property-id\",\n      \"property_value\": \"value\"\n      // Other property details...\n    }\n    // Additional properties...\n  ]\n}"
						},
						{
							"name": "Get Farm Element Properties Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/farm_element_properties/{farm_element_id}",
									"path": [
										"farm_element_properties",
										"{farm_element_id}"
									]
								},
								"description": "Retrieve properties of a specific farm element."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm element properties not found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Element Property] Update Property",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"property_value\": \"updated value\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/farm_element_properties/{property_id}",
							"path": [
								"farm_element_properties",
								"{property_id}"
							]
						},
						"description": "Update a property of a specific farm element."
					},
					"response": [
						{
							"name": "Update Farm Element Property Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"property_value\": \"updated value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_element_properties/{property_id}",
									"path": [
										"farm_element_properties",
										"{property_id}"
									]
								},
								"description": "Update a property of a specific farm element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm element property updated successfully\"\n}"
						},
						{
							"name": "Update Farm Element Property Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"property_value\": \"updated value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/farm_element_properties/{property_id}",
									"path": [
										"farm_element_properties",
										"{property_id}"
									]
								},
								"description": "Update a property of a specific farm element."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"property_id\": \"Invalid farm element property ID\"\n    },\n    \"message\": \"Failed to update farm element property\"\n}"
						}
					]
				},
				{
					"name": "[Farm Element Property] Delete Property",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/farm_element_properties/{property_id}",
							"path": [
								"farm_element_properties",
								"{property_id}"
							]
						},
						"description": "Delete a property from a specific farm element."
					},
					"response": [
						{
							"name": "Delete Farm Element Property Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_element_properties/{property_id}",
									"path": [
										"farm_element_properties",
										"{property_id}"
									]
								},
								"description": "Delete a property from a specific farm element."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Farm element property deleted successfully\"\n}"
						},
						{
							"name": "Delete Farm Element Property Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/farm_element_properties/{property_id}",
									"path": [
										"farm_element_properties",
										"{property_id}"
									]
								},
								"description": "Delete a property from a specific farm element."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Farm element property not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "element-types",
			"item": [
				{
					"name": "[Element Type] Create Element Type",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"tree\",\n  \"description\": \"A type of plant\",\n  \"image\": \"image-path\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/element_types",
							"path": [
								"element_types"
							]
						},
						"description": "Create a new element type."
					},
					"response": [
						{
							"name": "Create Element Type Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"tree\",\n  \"description\": \"A type of plant\",\n  \"image\": \"image-path\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_types",
									"path": [
										"element_types"
									]
								},
								"description": "Create a new element type."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-element-type-id\",\n        \"name\": \"tree\",\n        \"description\": \"A type of plant\",\n        \"image\": \"image-path\"\n    },\n    \"message\": \"Element type created successfully\"\n}"
						},
						{
							"name": "Create Element Type Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"tree\",\n  \"description\": \"A type of plant\",\n  \"image\": \"image-path\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_types",
									"path": [
										"element_types"
									]
								},
								"description": "Create a new element type."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"name\": \"Element type already exists\"\n    },\n    \"message\": \"Failed to create element type\"\n}"
						}
					]
				},
				{
					"name": "[Element Type] Get Element Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/element_types",
							"path": [
								"element_types"
							]
						},
						"description": "Retrieve a list of all element types."
					},
					"response": [
						{
							"name": "Get Element Types Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/element_types",
									"path": [
										"element_types"
									]
								},
								"description": "Retrieve a list of all element types."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"element-type-id\",\n      \"name\": \"tree\",\n      \"description\": \"A type of plant\",\n      \"image\": \"image-path\"\n    }\n    // Additional element types...\n  ]\n}"
						},
						{
							"name": "Get Element Types Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/element_types",
									"path": [
										"element_types"
									]
								},
								"description": "Retrieve a list of all element types."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element types not found\"\n}"
						}
					]
				},
				{
					"name": "[Element Type] Update Element Type",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"updated tree\",\n  \"description\": \"Updated description\",\n  \"image\": \"updated-image-path\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/element_types/{element_type_id}",
							"path": [
								"element_types",
								"{element_type_id}"
							]
						},
						"description": "Update an existing element type."
					},
					"response": [
						{
							"name": "Update Element Type Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"updated tree\",\n  \"description\": \"Updated description\",\n  \"image\": \"updated-image-path\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_types/{element_type_id}",
									"path": [
										"element_types",
										"{element_type_id}"
									]
								},
								"description": "Update an existing element type."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element type updated successfully\"\n}"
						},
						{
							"name": "Update Element Type Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"updated tree\",\n  \"description\": \"Updated description\",\n  \"image\": \"updated-image-path\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/element_types/{element_type_id}",
									"path": [
										"element_types",
										"{element_type_id}"
									]
								},
								"description": "Update an existing element type."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"name\": \"Element type with this name already exists\"\n    },\n    \"message\": \"Failed to update element type\"\n}"
						}
					]
				},
				{
					"name": "[Element Type] Delete Element Type",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/element_types/{element_type_id}",
							"path": [
								"element_types",
								"{element_type_id}"
							]
						},
						"description": "Delete a specific element type."
					},
					"response": [
						{
							"name": "Delete Element Type Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/element_types/{element_type_id}",
									"path": [
										"element_types",
										"{element_type_id}"
									]
								},
								"description": "Delete a specific element type."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Element type deleted successfully\"\n}"
						},
						{
							"name": "Delete Element Type Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/element_types/{element_type_id}",
									"path": [
										"element_types",
										"{element_type_id}"
									]
								},
								"description": "Delete a specific element type."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element type not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "equations",
			"item": [
				{
					"name": "[Equation] Add Equation",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"label\": \"Growth Rate\",\n  \"name\": \"growth_rate\",\n  \"formula\": \"height * age / 10\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/equations",
							"path": [
								"equations"
							]
						},
						"description": "Add a new equation for dynamic property calculations."
					},
					"response": [
						{
							"name": "Add Equation Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Growth Rate\",\n  \"name\": \"growth_rate\",\n  \"formula\": \"height * age / 10\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/equations",
									"path": [
										"equations"
									]
								},
								"description": "Add a new equation for dynamic property calculations."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-equation-id\",\n        \"message\": \"Equation added successfully\"\n    }\n}"
						},
						{
							"name": "Add Equation Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Growth Rate\",\n  \"name\": \"growth_rate\",\n  \"formula\": \"height * age / 10\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/equations",
									"path": [
										"equations"
									]
								},
								"description": "Add a new equation for dynamic property calculations."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"name\": \"Equation name already exists\"\n    },\n    \"message\": \"Failed to add equation\"\n}"
						}
					]
				},
				{
					"name": "[Equation] Get Equations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/equations",
							"path": [
								"equations"
							]
						},
						"description": "Retrieve a list of all equations."
					},
					"response": [
						{
							"name": "Get Equations Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/equations",
									"path": [
										"equations"
									]
								},
								"description": "Retrieve a list of all equations."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"equation-id\",\n      \"label\": \"Growth Rate\",\n      \"name\": \"growth_rate\",\n      \"formula\": \"height * age / 10\"\n      // Other equation details...\n    }\n    // Additional equations...\n  ]\n}"
						},
						{
							"name": "Get Equations Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/equations",
									"path": [
										"equations"
									]
								},
								"description": "Retrieve a list of all equations."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"No equations found\"\n}"
						}
					]
				},
				{
					"name": "[Equation] Update Equation",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"label\": \"Updated Growth Rate\",\n  \"formula\": \"updated_formula\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/equations/{equation_id}",
							"path": [
								"equations",
								"{equation_id}"
							]
						},
						"description": "Update an existing equation."
					},
					"response": [
						{
							"name": "Update Equation Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Updated Growth Rate\",\n  \"formula\": \"updated_formula\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/equations/{equation_id}",
									"path": [
										"equations",
										"{equation_id}"
									]
								},
								"description": "Update an existing equation."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Equation updated successfully\"\n}"
						},
						{
							"name": "Update Equation Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Updated Growth Rate\",\n  \"formula\": \"updated_formula\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/equations/{equation_id}",
									"path": [
										"equations",
										"{equation_id}"
									]
								},
								"description": "Update an existing equation."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"equation_id\": \"Invalid equation ID\"\n    },\n    \"message\": \"Failed to update equation\"\n}"
						}
					]
				},
				{
					"name": "[Equation] Delete Equation",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/equations/{equation_id}",
							"path": [
								"equations",
								"{equation_id}"
							]
						},
						"description": "Delete a specific equation."
					},
					"response": [
						{
							"name": "Delete Equation Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/equations/{equation_id}",
									"path": [
										"equations",
										"{equation_id}"
									]
								},
								"description": "Delete a specific equation."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Equation deleted successfully\"\n}"
						},
						{
							"name": "Delete Equation Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/equations/{equation_id}",
									"path": [
										"equations",
										"{equation_id}"
									]
								},
								"description": "Delete a specific equation."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Equation not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "properties",
			"item": [
				{
					"name": "[Property] Define Property",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"soil_moisture\",\n  \"type\": \"number\",\n  \"unit\": \"%\",\n  \"allowed_values\": null,\n  \"min_value\": 0,\n  \"max_value\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/properties",
							"path": [
								"properties"
							]
						},
						"description": "Define a new property that can be associated with various tables in the database."
					},
					"response": [
						{
							"name": "Define Property Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"soil_moisture\",\n  \"type\": \"number\",\n  \"unit\": \"%\",\n  \"allowed_values\": null,\n  \"min_value\": 0,\n  \"max_value\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/properties",
									"path": [
										"properties"
									]
								},
								"description": "Define a new property that can be associated with various tables in the database."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-property-id\",\n        \"message\": \"Property defined successfully\"\n    }\n}"
						},
						{
							"name": "Define Property Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"soil_moisture\",\n  \"type\": \"number\",\n  \"unit\": \"%\",\n  \"allowed_values\": null,\n  \"min_value\": 0,\n  \"max_value\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/properties",
									"path": [
										"properties"
									]
								},
								"description": "Define a new property that can be associated with various tables in the database."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"name\": \"Property name already exists\"\n    },\n    \"message\": \"Failed to define property\"\n}"
						}
					]
				},
				{
					"name": "[Property] Get Properties",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/properties",
							"path": [
								"properties"
							]
						},
						"description": "Retrieve a list of all defined properties."
					},
					"response": [
						{
							"name": "Get Properties Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/properties",
									"path": [
										"properties"
									]
								},
								"description": "Retrieve a list of all defined properties."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"property-id\",\n      \"name\": \"soil_moisture\",\n      \"type\": \"number\",\n      \"unit\": \"%\",\n      \"min_value\": 0,\n      \"max_value\": 100\n      // Other property details...\n    }\n    // Additional properties...\n  ]\n}"
						},
						{
							"name": "Get Properties Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/properties",
									"path": [
										"properties"
									]
								},
								"description": "Retrieve a list of all defined properties."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"No properties found\"\n}"
						}
					]
				},
				{
					"name": "[Property] Update Property",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"updated_soil_moisture\",\n  \"type\": \"number\",\n  \"unit\": \"%\",\n  \"allowed_values\": null,\n  \"min_value\": 0,\n  \"max_value\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/properties/{property_id}",
							"path": [
								"properties",
								"{property_id}"
							]
						},
						"description": "Update an existing property."
					},
					"response": [
						{
							"name": "Update Property Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"updated_soil_moisture\",\n  \"type\": \"number\",\n  \"unit\": \"%\",\n  \"allowed_values\": null,\n  \"min_value\": 0,\n  \"max_value\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/properties/{property_id}",
									"path": [
										"properties",
										"{property_id}"
									]
								},
								"description": "Update an existing property."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Property updated successfully\"\n}"
						},
						{
							"name": "Update Property Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"updated_soil_moisture\",\n  \"type\": \"number\",\n  \"unit\": \"%\",\n  \"allowed_values\": null,\n  \"min_value\": 0,\n  \"max_value\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/properties/{property_id}",
									"path": [
										"properties",
										"{property_id}"
									]
								},
								"description": "Update an existing property."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"property_id\": \"Invalid property ID\"\n    },\n    \"message\": \"Failed to update property\"\n}"
						}
					]
				},
				{
					"name": "[Property] Delete Property",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/properties/{property_id}",
							"path": [
								"properties",
								"{property_id}"
							]
						},
						"description": "Delete a specific property."
					},
					"response": [
						{
							"name": "Delete Property Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/properties/{property_id}",
									"path": [
										"properties",
										"{property_id}"
									]
								},
								"description": "Delete a specific property."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Property deleted successfully\"\n}"
						},
						{
							"name": "Delete Property Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/properties/{property_id}",
									"path": [
										"properties",
										"{property_id}"
									]
								},
								"description": "Delete a specific property."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Property not found\"\n}"
						}
					]
				},
				{
					"name": "[Property Table] Create Property Table Association",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"table\": \"farms\",\n  \"property_id\": \"property-uuid\",\n  \"fallback_table\": \"users\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/property_tables",
							"path": [
								"property_tables"
							]
						},
						"description": "Create a new association between a property and a table."
					},
					"response": [
						{
							"name": "Create Property Table Association Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"table\": \"farms\",\n  \"property_id\": \"property-uuid\",\n  \"fallback_table\": \"users\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/property_tables",
									"path": [
										"property_tables"
									]
								},
								"description": "Create a new association between a property and a table."
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": \"new-property-table-id\",\n        \"message\": \"Property table association created successfully\"\n    }\n}"
						},
						{
							"name": "Create Property Table Association Failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"table\": \"farms\",\n  \"property_id\": \"property-uuid\",\n  \"fallback_table\": \"users\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/property_tables",
									"path": [
										"property_tables"
									]
								},
								"description": "Create a new association between a property and a table."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"table\": \"Invalid table name\",\n        \"property_id\": \"Invalid property ID\"\n    },\n    \"message\": \"Failed to create property table association\"\n}"
						}
					]
				},
				{
					"name": "[Property Table] Get Property Table Associations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/property_tables",
							"path": [
								"property_tables"
							]
						},
						"description": "Retrieve a list of all property table associations."
					},
					"response": [
						{
							"name": "Get Property Table Associations Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/property_tables",
									"path": [
										"property_tables"
									]
								},
								"description": "Retrieve a list of all property table associations."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"property-table-id\",\n      \"table\": \"farms\",\n      \"property_id\": \"property-uuid\",\n      \"fallback_table\": \"users\"\n      // Other association details...\n    }\n    // Additional associations...\n  ]\n}"
						},
						{
							"name": "Get Property Table Associations Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/property_tables",
									"path": [
										"property_tables"
									]
								},
								"description": "Retrieve a list of all property table associations."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"No property table associations found\"\n}"
						}
					]
				},
				{
					"name": "[Property Table] Update Property Table Association",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"table\": \"updated_farms\",\n  \"fallback_table\": \"updated_users\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "/property_tables/{property_table_id}",
							"path": [
								"property_tables",
								"{property_table_id}"
							]
						},
						"description": "Update an existing property table association."
					},
					"response": [
						{
							"name": "Update Property Table Association Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"table\": \"updated_farms\",\n  \"fallback_table\": \"updated_users\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/property_tables/{property_table_id}",
									"path": [
										"property_tables",
										"{property_table_id}"
									]
								},
								"description": "Update an existing property table association."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Property table association updated successfully\"\n}"
						},
						{
							"name": "Update Property Table Association Failure",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"table\": \"updated_farms\",\n  \"fallback_table\": \"updated_users\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/property_tables/{property_table_id}",
									"path": [
										"property_tables",
										"{property_table_id}"
									]
								},
								"description": "Update an existing property table association."
							},
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"errors\": {\n        \"property_table_id\": \"Invalid property table ID\",\n        \"table\": \"Invalid table name\"\n    },\n    \"message\": \"Failed to update property table association\"\n}"
						}
					]
				},
				{
					"name": "[Property Table] Delete Property Table Association",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "/property_tables/{property_table_id}",
							"path": [
								"property_tables",
								"{property_table_id}"
							]
						},
						"description": "Delete a specific property table association."
					},
					"response": [
						{
							"name": "Delete Property Table Association Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/property_tables/{property_table_id}",
									"path": [
										"property_tables",
										"{property_table_id}"
									]
								},
								"description": "Delete a specific property table association."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Property table association deleted successfully\"\n}"
						},
						{
							"name": "Delete Property Table Association Failure",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "/property_tables/{property_table_id}",
									"path": [
										"property_tables",
										"{property_table_id}"
									]
								},
								"description": "Delete a specific property table association."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Property table association not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "planning",
			"item": [
				{
					"name": "[Farm Planning] Shuffle Grow Bed",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/planning/{farm_id}/shuffle-grow-bed/{element_id}",
							"path": [
								"planning",
								"{farm_id}",
								"shuffle-grow-bed",
								"{element_id}"
							]
						},
						"description": "Get a list of recommended plants to plant inside the grow bed associated with the provided element ID."
					},
					"response": [
						{
							"name": "Shuffle Grow Bed Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"element\": {\n        \"id\": \"element-uuid\",\n        \"name\": \"Tomato\",\n        \"image\": \"tomato-image-path\",\n        \"type\": \"Veggie\",\n        \"recommended_periods\": {\n          \"planting_period\": {\n            \"startDate\": \"2024-03-01\",\n            \"endDate\": \"2024-04-15\"\n          },\n          \"harvesting_period\": {\n            \"startDate\": \"2024-07-01\",\n            \"endDate\": \"2024-09-30\"\n          }\n        }\n      }\n      // Additional recommended elements...\n    }\n  ]\n}"
						},
						{
							"name": "Shuffle Grow Bed Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/shuffle-grow-bed/{element_id}",
									"path": [
										"planning",
										"shuffle-grow-bed",
										"{element_id}"
									]
								},
								"description": "Get a list of recommended plants to plant inside the grow bed associated with the provided element ID."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Element not found or no recommendations available\"\n}"
						}
					]
				},
				{
					"name": "[Farm Planning] Farm Future Elements",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/planning/{farm_id}/farm-future-elements?future_date={future_date}",
							"path": [
								"planning",
								"{farm_id}",
								"farm-future-elements"
							],
							"query": [
								{
									"key": "future_date",
									"value": "{future_date}",
									"description": "The future date for which the farm elements are being forecasted."
								}
							]
						},
						"description": "Get a forecast or plan of the elements expected to be present on the farm at a specified future date. This can include elements like plants, their growth stages, and any other relevant farm items."
					},
					"response": [
						{
							"name": "Farm Future Elements Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/farm-future-elements?future_date={future_date}",
									"path": [
										"planning",
										"{farm_id}",
										"farm-future-elements"
									],
									"query": [
										{
											"key": "future_date",
											"value": "{future_date}",
											"description": "The future date for which the farm elements are being forecasted."
										}
									]
								},
								"description": "Get a forecast or plan of the elements expected to be present on the farm at a specified future date. This can include elements like plants, their growth stages, and any other relevant farm items."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"element_id\": \"element-uuid\",\n      \"name\": \"Tomato\",\n      \"expected_stage\": \"Harvesting\",\n      \"image\": \"tomato-image-path\",\n      \"additional_info\": {\n        \"expected_yield\": \"200 pieces\",\n        \"condition\": \"Optimal\"\n      }\n    },\n    // Additional future elements...\n  ]\n}"
						},
						{
							"name": "Farm Future Elements Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/farm-future-elements?future_date={future_date}",
									"path": [
										"planning",
										"{farm_id}",
										"farm-future-elements"
									],
									"query": [
										{
											"key": "future_date",
											"value": "{future_date}",
											"description": "The future date for which the farm elements are being forecasted."
										}
									]
								},
								"description": "Get a forecast or plan of the elements expected to be present on the farm at a specified future date. This can include elements like plants, their growth stages, and any other relevant farm items."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"No data available for the provided future date\"\n}"
						}
					]
				},
				{
					"name": "[Farm Planning] Get All Grow Beds with Plants",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/planning/{farm_id}/grow-beds",
							"path": [
								"planning",
								"{farm_id}",
								"grow-beds"
							]
						},
						"description": "Retrieve all grow beds in the farm along with the plants inside each grow bed. Plants are grouped by the grow bed they belong to."
					},
					"response": [
						{
							"name": "Get All Grow Beds Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/grow-beds",
									"path": [
										"planning",
										"{farm_id}",
										"grow-beds"
									]
								},
								"description": "Retrieve all grow beds in the farm along with the plants inside each grow bed. Plants are grouped by the grow bed they belong to."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"grow_bed_id\": \"grow-bed-uuid\",\n      \"grow_bed_name\": \"Grow Bed 1\",\n      \"plants\": [\n        {\n          \"element_id\": \"plant-uuid\",\n          \"name\": \"Tomato\",\n          \"image\": \"tomato-image-path\",\n          \"type\": \"Veggie\"\n          // Additional plant details...\n        }\n        // Additional plants in the same grow bed...\n      ]\n    }\n    // Additional grow beds...\n  ]\n}"
						},
						{
							"name": "Get All Grow Beds Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/grow-beds",
									"path": [
										"planning",
										"{farm_id}",
										"grow-beds"
									]
								},
								"description": "Retrieve all grow beds in the farm along with the plants inside each grow bed. Plants are grouped by the grow bed they belong to."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"No grow beds found\"\n}"
						}
					]
				},
				{
					"name": "[Farm Planning] Month Harvesting Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/planning/{farm_id}/month-harvesting-info?month={month}",
							"path": [
								"planning",
								"{farm_id}",
								"month-harvesting-info"
							],
							"query": [
								{
									"key": "month",
									"value": "{month}",
									"description": "The specified month for which harvesting information is requested."
								}
							]
						},
						"description": "Get a list of elements (plants or other types) expected to be harvested in the specified month for a given farm, along with details like quantity, expected yield, actual yield, and labor."
					},
					"response": [
						{
							"name": "Month Harvesting Info Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/month-harvesting-info?month={month}",
									"path": [
										"planning",
										"{farm_id}",
										"month-harvesting-info"
									],
									"query": [
										{
											"key": "month",
											"value": "{month}",
											"description": "The specified month for which harvesting information is requested."
										}
									]
								},
								"description": "Get a list of elements (plants or other types) expected to be harvested in the specified month for a given farm, along with details like quantity, expected yield, actual yield, and labor."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"element_id\": \"element-uuid\",\n      \"element_name\": \"Tomato\",\n      \"quantity\": 100,\n      \"expected_yield\": 150,\n      \"actual_yield\": 120,\n      \"labour\": 5\n      // Additional element harvesting details...\n    }\n    // Additional elements...\n  ]\n}"
						},
						{
							"name": "Month Harvesting Info Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/month-harvesting-info?month={month}",
									"path": [
										"planning",
										"{farm_id}",
										"month-harvesting-info"
									],
									"query": [
										{
											"key": "month",
											"value": "{month}",
											"description": "The specified month for which harvesting information is requested."
										}
									]
								},
								"description": "Get a list of elements (plants or other types) expected to be harvested in the specified month for a given farm, along with details like quantity, expected yield, actual yield, and labor."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Harvesting information not found for the specified month\"\n}"
						}
					]
				},
				{
					"name": "[Farm Planning] Farm Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/planning/{farm_id}/statistics",
							"path": [
								"planning",
								"{farm_id}",
								"statistics"
							]
						},
						"description": "Get various statistics of the farm, including planting area, pathway area, total yield, and other relevant information."
					},
					"response": [
						{
							"name": "Farm Statistics Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/statistics",
									"path": [
										"planning",
										"{farm_id}",
										"statistics"
									]
								},
								"description": "Get various statistics of the farm, including planting area, pathway area, total yield, and other relevant information."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"planting_area\": \"1000 sqm\",\n    \"pathway_area\": \"200 sqm\",\n    \"total_yield\": \"5000 kg\",\n    \"water_usage\": \"5000 liters\",\n    \"labor_hours\": \"100 hours\",\n    // Additional statistics...\n  }\n}"
						},
						{
							"name": "Farm Statistics Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/statistics",
									"path": [
										"planning",
										"{farm_id}",
										"statistics"
									]
								},
								"description": "Get various statistics of the farm, including planting area, pathway area, total yield, and other relevant information."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Statistics not found for the specified farm ID\"\n}"
						}
					]
				},
				{
					"name": "[Farm Planning] Plant Recommended Periods",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/planning/{farm_id}/plant-recommended-periods/{elementId}",
							"path": [
								"planning",
								"{farm_id}",
								"plant-recommended-periods",
								"{elementId}"
							]
						},
						"description": "Get the recommended planting and harvesting periods for a specific plant (element) within a farm."
					},
					"response": [
						{
							"name": "Plant Recommended Periods Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/plant-recommended-periods/{elementId}",
									"path": [
										"planning",
										"{farm_id}",
										"plant-recommended-periods",
										"{elementId}"
									]
								},
								"description": "Get the recommended planting and harvesting periods for a specific plant (element) within a farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"planting_period\": {\n            \"start_date\": \"2024-03-01\",\n            \"end_date\": \"2024-04-15\"\n        },\n        \"harvesting_period\": {\n            \"start_date\": \"2024-08-01\",\n            \"end_date\": \"2024-09-15\"\n        }\n    }\n}"
						},
						{
							"name": "Plant Recommended Periods Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/plant-recommended-periods/{elementId}",
									"path": [
										"planning",
										"{farm_id}",
										"plant-recommended-periods",
										"{elementId}"
									]
								},
								"description": "Get the recommended planting and harvesting periods for a specific plant (element) within a farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Recommended periods not found for the specified element\"\n}"
						}
					]
				},
				{
					"name": "[Farm Planning] Expected Yield for Farm Element",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "/planning/{farm_id}/expected-yield/{farm_element_id}",
							"path": [
								"planning",
								"{farm_id}",
								"expected-yield",
								"{farm_element_id}"
							]
						},
						"description": "Get the expected yield for a specific farm element (e.g., plant, crop) within a farm."
					},
					"response": [
						{
							"name": "Expected Yield Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/expected-yield/{farm_element_id}",
									"path": [
										"planning",
										"{farm_id}",
										"expected-yield",
										"{farm_element_id}"
									]
								},
								"description": "Get the expected yield for a specific farm element (e.g., plant, crop) within a farm."
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"expected_yield_pieces\": 1000,\n    \"expected_yield_weight\": \"500 kg\",\n    \"element_id\": \"farm-element-uuid\",\n    \"element_name\": \"Tomato\"\n    // Additional yield details...\n  }\n}"
						},
						{
							"name": "Expected Yield Failure",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/planning/{farm_id}/expected-yield/{farm_element_id}",
									"path": [
										"planning",
										"{farm_id}",
										"expected-yield",
										"{farm_element_id}"
									]
								},
								"description": "Get the expected yield for a specific farm element (e.g., plant, crop) within a farm."
							},
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"message\": \"Expected yield not found for the specified farm element\"\n}"
						}
					]
				}
			]
		}
	]
}